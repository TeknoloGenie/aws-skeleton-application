import { CloudFormationCustomResourceEvent, CloudFormationCustomResourceResponse } from 'aws-lambda';
import * as fs from 'fs';
import * as path from 'path';

interface ModelInfo {
  name: string;
  hasSubscriptions: boolean;
  hasRateLimit: boolean;
}

export const handler = async (
  event: CloudFormationCustomResourceEvent
): Promise<CloudFormationCustomResourceResponse> => {
  console.log('AWS Exports Generator Event:', JSON.stringify(event, null, 2));

  try {
    const {
      USER_POOL_ID,
      USER_POOL_CLIENT_ID,
      GRAPHQL_API_URL,
      GRAPHQL_API_ID,
      ADMIN_API_URL,
      APP_NAME,
      STAGE,
      MODELS,
    } = process.env;

    // AWS_REGION is automatically provided by Lambda runtime
    const AWS_REGION = process.env.AWS_REGION;

    if (!USER_POOL_ID || !USER_POOL_CLIENT_ID || !GRAPHQL_API_URL || !AWS_REGION) {
      throw new Error('Missing required environment variables');
    }

    const models: ModelInfo[] = MODELS ? JSON.parse(MODELS) : [];

    // Generate aws-exports.js content
    const awsExportsContent = generateAwsExports({
      userPoolId: USER_POOL_ID,
      userPoolClientId: USER_POOL_CLIENT_ID,
      graphqlApiUrl: GRAPHQL_API_URL,
      graphqlApiId: GRAPHQL_API_ID || '',
      adminApiUrl: ADMIN_API_URL || '',
      region: AWS_REGION,
      appName: APP_NAME || 'SkeletonApp',
      stage: STAGE || 'dev',
      models,
    });

    // Write to frontend directory
    const frontendDir = path.resolve('./frontend/src');
    const awsExportsPath = path.join(frontendDir, 'aws-exports.js');

    // Ensure directory exists
    if (!fs.existsSync(frontendDir)) {
      fs.mkdirSync(frontendDir, { recursive: true });
    }

    // Write the file
    fs.writeFileSync(awsExportsPath, awsExportsContent, 'utf8');

    console.log(`AWS exports file generated at: ${awsExportsPath}`);

    // Also generate TypeScript version
    const awsExportsTs = awsExportsContent.replace(
      'const awsmobile = {',
      'const awsmobile: any = {'
    );
    fs.writeFileSync(
      path.join(frontendDir, 'aws-exports.ts'),
      awsExportsTs,
      'utf8'
    );

    return {
      Status: 'SUCCESS',
      PhysicalResourceId: `aws-exports-${Date.now()}`,
      StackId: event.StackId,
      RequestId: event.RequestId,
      LogicalResourceId: event.LogicalResourceId,
      Data: {
        ConfigGenerated: 'true',
        FilePath: awsExportsPath,
        Timestamp: new Date().toISOString(),
      },
    };
  } catch (error) {
    console.error('Error generating AWS exports:', error);
    return {
      Status: 'FAILED',
      PhysicalResourceId: `aws-exports-${Date.now()}`,
      StackId: event.StackId,
      RequestId: event.RequestId,
      LogicalResourceId: event.LogicalResourceId,
      Reason: error instanceof Error ? error.message : 'Unknown error',
    };
  }
};

function generateAwsExports(config: {
  userPoolId: string;
  userPoolClientId: string;
  graphqlApiUrl: string;
  graphqlApiId: string;
  adminApiUrl: string;
  region: string;
  appName: string;
  stage: string;
  models: ModelInfo[];
}): string {
  const hasSubscriptions = config.models.some(m => m.hasSubscriptions);
  const hasRateLimit = config.models.some(m => m.hasRateLimit);

  return `/* eslint-disable */
// WARNING: DO NOT EDIT. This file is automatically generated by AWS CDK.
// Any changes you make will be overwritten on the next deployment.

const awsmobile = {
  "aws_project_region": "${config.region}",
  "aws_project_name": "${config.appName}",
  "aws_project_stage": "${config.stage}",
  "aws_cognito_identity_pool_id": "",
  "aws_cognito_region": "${config.region}",
  "aws_user_pools_id": "${config.userPoolId}",
  "aws_user_pools_web_client_id": "${config.userPoolClientId}",
  "oauth": {},
  "aws_cognito_username_attributes": ["email"],
  "aws_cognito_social_providers": [],
  "aws_cognito_signup_attributes": ["email"],
  "aws_cognito_mfa_configuration": "OFF",
  "aws_cognito_mfa_types": ["SMS"],
  "aws_cognito_password_protection_settings": {
    "passwordPolicyMinLength": 8,
    "passwordPolicyCharacters": []
  },
  "aws_cognito_verification_mechanisms": ["email"],
  "aws_appsync_graphqlEndpoint": "${config.graphqlApiUrl}",
  "aws_appsync_region": "${config.region}",
  "aws_appsync_authenticationType": "AMAZON_COGNITO_USER_POOLS",
  "aws_appsync_apiKey": "",
  "aws_admin_api_endpoint": "${config.adminApiUrl}",
  ${hasSubscriptions ? `"aws_appsync_realTimeEndpoint": "${config.graphqlApiUrl.replace('https://', 'wss://').replace('/graphql', '/realtime')}",` : ''}
  ${hasRateLimit ? `"aws_appsync_jobCompletionEndpoint": "${config.graphqlApiUrl}",` : ''}
  "models": ${JSON.stringify(config.models, null, 2)},
  "generated_at": "${new Date().toISOString()}",
  "cdk_version": "2.x",
  "framework_version": "1.0.0"
};

export default awsmobile;
`;
}

// Helper function to validate configuration
function validateConfig(config: any): void {
  const required = ['userPoolId', 'userPoolClientId', 'graphqlApiUrl', 'region'];
  for (const field of required) {
    if (!config[field]) {
      throw new Error(`Missing required configuration: ${field}`);
    }
  }
}
