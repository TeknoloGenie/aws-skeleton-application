import { createApp } from 'vue'
import { createRouter, createWebHistory } from 'vue-router'
import { Amplify } from 'aws-amplify'
import AmplifyUIVue from '@aws-amplify/ui-vue'
import { fetchAuthSession } from '@aws-amplify/auth'
import App from './App.vue'
import './style.css'

// Import views
import Home from './views/Home.vue'
import Dashboard from './views/Dashboard.vue'
import Users from './views/Users.vue'
import Posts from './views/Posts.vue'
import PostDetail from './views/PostDetail.vue'
import Login from './views/Login.vue'
import AdminDashboard from './views/admin/AdminDashboard.vue'

// Import services
import { settingsService } from './services/settings'
import { analytics } from './services/analytics'

// Import AWS configuration (generated by CDK)
let awsExports: any;
try {
  awsExports = (await import('./aws-exports.js')).default;
  console.log('Using generated AWS configuration');
} catch (error) {
  console.warn('Generated AWS configuration not found, using environment variables');
  // Fallback to environment variables for local development
  awsExports = {
    Auth: {
      Cognito: {
        userPoolId: import.meta.env.VITE_USER_POOL_ID || 'us-east-1_XXXXXXXXX',
        userPoolClientId: import.meta.env.VITE_USER_POOL_CLIENT_ID || 'xxxxxxxxxxxxxxxxxxxxxxxxxx',
        signUpVerificationMethod: 'code',
        loginWith: {
          email: true,
          username: false
        }
      }
    },
    API: {
      GraphQL: {
        endpoint: import.meta.env.VITE_GRAPHQL_ENDPOINT || 'https://xxxxxxxxxxxxxxxxxxxxxxxxxx.appsync-api.us-east-1.amazonaws.com/graphql',
        region: import.meta.env.VITE_AWS_REGION || 'us-east-1',
        defaultAuthMode: 'userPool'
      }
    }
  };
}

// Configure Amplify with generated configuration
Amplify.configure(awsExports);

// Define routes
const routes = [
  { path: '/', component: Home },
  { path: '/login', component: Login },
  { path: '/dashboard', component: Dashboard, meta: { requiresAuth: true } },
  { path: '/users', component: Users, meta: { requiresAuth: true } },
  { path: '/posts', component: Posts, meta: { requiresAuth: true } },
  { path: '/posts/:id', component: PostDetail, meta: { requiresAuth: true } },
  { path: '/admin', component: AdminDashboard, meta: { requiresAuth: true, requiresAdmin: true } }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

// Navigation guard for authentication using Amplify v6
router.beforeEach(async (to, from, next) => {
  if (to.meta.requiresAuth) {
    try {
      const session = await fetchAuthSession();
      if (session.tokens?.accessToken) {
        // Check admin access for admin routes
        if (to.meta.requiresAdmin) {
          const idToken = session.tokens.idToken;
          const groups = idToken?.payload['cognito:groups'] || [];
          const groupsArray = Array.isArray(groups) 
            ? groups.filter((g): g is string => typeof g === 'string')
            : typeof groups === 'string' 
              ? [groups] 
              : [];
          if (!groupsArray.includes('admins')) {
            next('/dashboard'); // Redirect non-admins to regular dashboard
            return;
          }
        }
        
        // Set user ID for analytics
        const userId = session.tokens.idToken?.payload.sub;
        if (userId) {
          analytics.setUserId(userId);
        }
        
        next();
      } else {
        next('/login');
      }
    } catch (error) {
      console.log('Authentication check failed:', error);
      next('/login');
    }
  } else {
    next();
  }
})

// Initialize settings service
settingsService.loadSettings();

const app = createApp(App)
app.use(router)
app.use(AmplifyUIVue)
app.mount('#app')
