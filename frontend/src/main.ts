import { createApp } from 'vue'
import { createRouter, createWebHistory } from 'vue-router'
import { Amplify } from 'aws-amplify'
import AmplifyPlugin from '@aws-amplify/ui-vue'
import App from './App.vue'
import './style.css'

// Import views
import Home from './views/Home.vue'
import Dashboard from './views/Dashboard.vue'
import Users from './views/Users.vue'
import Posts from './views/Posts.vue'
import Login from './views/Login.vue'

// Import AWS configuration (generated by CDK)
let awsExports;
try {
  awsExports = (await import('./aws-exports.js')).default;
  console.log('Using generated AWS configuration');
} catch (error) {
  console.warn('Generated AWS configuration not found, using environment variables');
  // Fallback to environment variables for local development
  awsExports = {
    aws_project_region: import.meta.env.VITE_AWS_REGION || 'us-east-1',
    aws_user_pools_id: import.meta.env.VITE_USER_POOL_ID || 'us-east-1_XXXXXXXXX',
    aws_user_pools_web_client_id: import.meta.env.VITE_USER_POOL_CLIENT_ID || 'xxxxxxxxxxxxxxxxxxxxxxxxxx',
    aws_appsync_graphqlEndpoint: import.meta.env.VITE_GRAPHQL_ENDPOINT || 'https://xxxxxxxxxxxxxxxxxxxxxxxxxx.appsync-api.us-east-1.amazonaws.com/graphql',
    aws_appsync_region: import.meta.env.VITE_AWS_REGION || 'us-east-1',
    aws_appsync_authenticationType: 'AMAZON_COGNITO_USER_POOLS',
    aws_cognito_username_attributes: ['email'],
    aws_cognito_signup_attributes: ['email'],
    aws_cognito_mfa_configuration: 'OFF',
    aws_cognito_password_protection_settings: {
      passwordPolicyMinLength: 8,
      passwordPolicyCharacters: []
    },
    aws_cognito_verification_mechanisms: ['email']
  };
}

// Configure Amplify with generated configuration
Amplify.configure(awsExports);

// Define routes
const routes = [
  { path: '/', component: Home },
  { path: '/login', component: Login },
  { path: '/dashboard', component: Dashboard, meta: { requiresAuth: true } },
  { path: '/users', component: Users, meta: { requiresAuth: true } },
  { path: '/posts', component: Posts, meta: { requiresAuth: true } }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

// Navigation guard for authentication
router.beforeEach(async (to, from, next) => {
  if (to.meta.requiresAuth) {
    try {
      const { Auth } = await import('aws-amplify')
      await Auth.currentAuthenticatedUser()
      next()
    } catch (error) {
      next('/login')
    }
  } else {
    next()
  }
})

const app = createApp(App)
app.use(router)
app.use(AmplifyPlugin)
app.mount('#app')
